#version 330 core

uniform sampler2D aTexture;
out vec4 frag_color;

in VS_OUT {
	vec3 frag_pos;
	vec3 normal;
	vec2 tex_coord;
	vec3 light_dir;
	vec3 sky_color;
} fs_in;

uniform vec3 view_pos;

uniform bool textured = false;
uniform float ambient = 0.1;
uniform float reflectivity = 0.2;
uniform float shine_damper = 1.0;
uniform vec4 color = vec4(1.0);

uniform vec3 light_pos = vec3(0.0, 1.0, 0.0);
const vec3 light_color = vec3(1.0, 1.0, 1.0);

const float near = 0.1;
const float far = 100.0;

float calculate_depth()
{
	float z = gl_FragCoord.z * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near)) / far;
}

vec3 calculate_ambient()
{
	return ambient * light_color;
}

vec3 calculate_diffuse(vec3 norm, vec3 light_dir)
{
	float diffuse = max(dot(norm, light_dir), 0.0);
	return diffuse * fs_in.sky_color;
}

vec3 calculate_specular(vec3 norm, vec3 light_dir)
{
	vec3 view_dir = normalize(view_pos - fs_in.frag_pos);
	vec3 reflect_dir = reflect(-light_dir, norm);
	float spec = pow(max(0.0, dot(view_dir, reflect_dir)), shine_damper);
	return reflectivity * spec * light_color;
}

void main()
{
	vec3 norm = normalize(fs_in.normal);
	vec3 light_dir = normalize(light_pos - fs_in.frag_pos);

	light_dir = fs_in.light_dir;

	vec3 ambient_lighting = calculate_ambient();
	vec3 diffuse = calculate_diffuse(norm, light_dir);
	vec3 specular = calculate_specular(norm, light_dir);
	
	vec4 result = vec4(ambient_lighting + diffuse + specular, 1.0) * color;
	if (textured)
		frag_color = texture(aTexture, fs_in.tex_coord) * result;
	else
		frag_color = result;

	//float depth = calculate_depth();
	//frag_color = vec4(vec3(depth), 1.0);
}