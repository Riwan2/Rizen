#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNorm;
layout (location = 2) in vec2 aTexCoord;
layout (location = 3) in mat4 aModel;

layout (std140) uniform Matrices {
	mat4 projection_view;	// 16		// 16
							// 16		// 32
							// 16		// 48
							// 16		// 64
	vec3 sun_direction;		// 16		// 80
	vec3 sky_color;			// 16		// 96
};

uniform mat4 model = mat4(1.0);
uniform bool instanced = false;

out VS_OUT {
	vec3 frag_pos;
	vec3 normal;
	vec2 tex_coord;
	vec3 light_dir;
	vec3 sky_color;
} vs_out;

void main()
{
	mat4 shader_model = model;
	if (instanced)
		shader_model = aModel;

	gl_Position = projection_view * shader_model * vec4(aPos, 1.0);
	
	vs_out.frag_pos = vec3(shader_model * vec4(aPos, 1.0));
	vs_out.normal = mat3(transpose(inverse(shader_model))) * aNorm;
	vs_out.tex_coord = aTexCoord;

	vs_out.light_dir = sun_direction;
	vs_out.sky_color = sky_color;
}