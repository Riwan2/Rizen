#version 330 core

uniform sampler2D aTexture;
uniform sampler2D shadowMap;

out vec4 frag_color;

in VS_OUT {
	vec3 frag_pos;
	vec3 normal;
	vec2 tex_coord;
	vec3 light_dir;
	vec3 sky_color;
	vec4 FragPosLightSpace;
} fs_in;

uniform vec3 view_pos;
uniform float u_time;

uniform bool textured = false;
uniform vec4 color = vec4(1.0);
uniform float ambient = 0;

float tex_coord_factor = 2;
int cell_level = 20;

const float near = 0.1;
const float far = 100.0;

in vec4 shadowCoord;

float calculate_depth()
{
	float z = gl_FragCoord.z * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near)) / far;
}

vec3 calculate_diffuse(vec3 norm, vec3 light_dir)
{
	float diffuse = max(dot(norm, light_dir), 0.0);
	diffuse = floor(diffuse * cell_level);
	diffuse = diffuse / cell_level;
	return diffuse * fs_in.sky_color;
}

void main()
{
	vec3 norm = normalize(fs_in.normal);
	//float day_time = u_time * 0.1;
	vec3 light_dir = fs_in.light_dir;

	vec3 diffuse = calculate_diffuse(norm, light_dir);	
	//vec4 result = vec4(ambient + diffuse, 1.0) * color;

	// SHADOW
	vec3 projCoords = fs_in.FragPosLightSpace.xyz / fs_in.FragPosLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5;
	float closestDepth = texture(shadowMap, projCoords.xy).r;
	float currentDepth = projCoords.z;
	
	//float bias = 0.005;
	//float shadow = currentDepth > closestDepth ? 1.0 : 0.0;  

	float shadow = 0.0;
	vec2 texelSize = 1.0 / vec2(800, 800);
	for(int x = -1; x <= 1; ++x) {
    	for(int y = -1; y <= 1; ++y) {
        	float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
        	shadow += currentDepth > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	shadow /= 9.0;

	if (projCoords.z > 1.0 || projCoords.z < 0.0 || projCoords.x > 1.0 || projCoords.x < 0.0 || projCoords.y < 0.0 || projCoords.y > 1.0)
		shadow = 0.0;

	vec4 result = vec4((ambient + (1.0 - shadow) * (diffuse)), 1.0) * color;
	frag_color = result;
	
	
	//frag_color = texture(shadowMap, fs_in.tex_coord);

	//frag_color = vec4(projCoords, 1.0);

    //vec2 tex_coord = fs_in.tex_coord * tex_coord_factor;
    
    //float time = u_time * 0.05;
    //float dist = 2;
    //tex_coord.x += cos(time) * dist;
    //tex_coord.y += sin(time) * dist;

	//frag_color = texture(aTexture, tex_coord) * result;
	//frag_color = result;

	//float depth = calculate_depth();
	//frag_color = vec4(vec3(depth), 1.0);
}